What happens when you initialize a repository? Why do you need to do it?

	When initializing a repository, a hidden file .git is created to hold the 
	meta information which is needed to keep track of the commit history of 
	this repository. Without initializing, we don't have a git repository and
	we only have a regular directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area contains some files from the working directory. Those
	files' changes will be tracked and can be commited. The repository is a
	special directory that contain a special hidden file .git. We can turn a 
	working directory into a git repository by using git init.

How can you use the staging area to make sure you have one commit per logical
change?

	Even thougth there might be several changes in the working directory, I
	can select only those changes that represent a single logical change and
	add relevant files to the staging area. Commiting in this case will only
	include those relevant changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when I need to try out some new features but
	don't want to include them in the master branch yet. I can have two
	separate branches without worring about one interfere with the other.

How do the diagrams help you visualize the branch structure?

	Of cause the diagrams help with visualization. That is what a diagram is.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together combines the changes from both two branches
	and commit the resulting version in the current branch. The way we
	represent merging is intuitive and informing.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
